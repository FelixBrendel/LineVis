cmake_minimum_required (VERSION 3.5)
cmake_policy(VERSION 3.5...3.20)
option(USE_GTEST "USE_GTEST" OFF)

project (LineVis)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/CMake)
#MESSAGE(STATUS "CMAKE_MODULE_PATH: " ${CMAKE_MODULE_PATH})

set(CMAKE_CXX_STANDARD 17)

file(GLOB_RECURSE SOURCES src/*.cpp src/*.c)
include_directories(src)

#make VERBOSE=1

if(MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zc:__cplusplus")
endif()

#if(MSVC)
#    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W3 /EHsc /Zc:__cplusplus")
#elseif(CMAKE_COMPILER_IS_GNUCXX)
#    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
#elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
#    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
#endif()

# Prefer GLVND by default when available.
if (${CMAKE_VERSION} VERSION_GREATER "3.11")
    cmake_policy(SET CMP0072 NEW)
endif()

option(USE_PYTHON "Build with Python 3 support for replay scripts" ON)
option(USE_VULKAN_INTEROP "Build with Vulkan interoperability for ray tracing and ambient occlusion support." ON)

set(DATA_PATH "${CMAKE_SOURCE_DIR}/Data" CACHE PATH "Location of folder 'Data'")
add_definitions(-DDATA_PATH=\"${DATA_PATH}\")

if (USE_PYTHON)
    if (${CMAKE_VERSION} VERSION_GREATER "3.11")
        # 2021-05-06: CMake won't find vcpkg version if we don't search for the interpreter.
        if(VCPKG_TOOLCHAIN)
            find_package(Python3 COMPONENTS Development Interpreter REQUIRED)
        else()
            find_package(Python3 COMPONENTS Development REQUIRED)
        endif()
    else()
        pkg_check_modules(Python3 QUIET python3)
    endif()
endif()

if (Python3_FOUND AND USE_PYTHON)
    MESSAGE(STATUS "Found Python 3. Enabling replay script support.")
else()
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/Widgets/ReplayWidget.cpp)
    MESSAGE(STATUS "Python 3 couldn't be found. Switching off replay script support.")
endif()


set(FPHSA_NAME_MISMATCHED TRUE)
if(VCPKG_TOOLCHAIN)
    find_package(SDL2 CONFIG REQUIRED)
else()
    find_package(SDL2 REQUIRED)
endif()

cmake_policy(SET CMP0012 NEW)
find_package(OpenMP REQUIRED)
find_package(sgl REQUIRED)
find_package(Boost COMPONENTS system filesystem REQUIRED)
find_package(GLEW REQUIRED)
find_package(OpenGL REQUIRED)
find_package(NetCDF REQUIRED)
find_package(jsoncpp REQUIRED)
set(FPHSA_NAME_MISMATCHED TRUE)
if(VCPKG_TOOLCHAIN)
    find_package(tinyxml2 CONFIG REQUIRED)
else()
    find_package(TinyXML2 REQUIRED)
endif()

get_target_property(SGL_INTERFACE_COMPILE_DEFINITIONS sgl INTERFACE_COMPILE_DEFINITIONS)
if ("SUPPORT_VULKAN" IN_LIST SGL_INTERFACE_COMPILE_DEFINITIONS)
	set(SUPPORT_VULKAN ON)
endif()

if (NOT SUPPORT_VULKAN AND USE_VULKAN_INTEROP)
	MESSAGE(STATUS "Disabling Vulkan interoperability, as sgl was not built with Vulkan support.")
endif()
if (NOT SUPPORT_VULKAN OR NOT USE_VULKAN_INTEROP)
	list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/Renderers/Vulkan/VulkanTestRenderer.cpp)
endif()

# Embree version 3.12.1-2 shipped by msys2 seems to be buggy and crashes on rtcCommitScene :(
if(NOT "${CMAKE_GENERATOR}" STREQUAL "MSYS Makefiles")
    if(VCPKG_TOOLCHAIN)
        find_package(TBB QUIET)
        find_package(embree 3 QUIET)
    else()
        find_package(embree 3.0 QUIET)
    endif()
endif()
if(embree_FOUND)
    MESSAGE(STATUS "Found Embree. Enabling Embree as as a ray-mesh intersection library for RTAO pre-baking.")
else()
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/Renderers/AmbientOcclusion/EmbreeAmbientOcclusionBaker.cpp)
    MESSAGE(STATUS "Embree couldn't be found. Disabling Embree RTAO pre-baking support.")
endif()

if(embree_FOUND)
    find_package(ospray QUIET)
    if(ospray_FOUND)
        MESSAGE(STATUS "Found OSPRay. Enabling CPU ray tracing using OSPRay.")
    endif()
endif()

if(NOT embree_FOUND OR NOT ospray_FOUND)
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/Renderers/Ospray/OsprayRenderer.cpp)
    list(REMOVE_ITEM SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/Renderers/Ospray/OsprayRenderer.hpp)
    MESSAGE(STATUS "OSPRay couldn't be found. Disabling CPU ray tracing.")
endif()

if(WIN32)
    add_executable(LineVis WIN32 ${SOURCES})
else()
    add_executable(LineVis ${SOURCES})
endif()

if((${CMAKE_GENERATOR} STREQUAL "MinGW Makefiles") OR (${CMAKE_GENERATOR} STREQUAL "MSYS Makefiles"))
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -mwindows")
    target_link_libraries(LineVis PUBLIC mingw32)
endif()
if(VCPKG_TOOLCHAIN)
    target_link_libraries(LineVis PUBLIC SDL2::SDL2main)
else()
    target_link_libraries(LineVis PUBLIC SDL2::Main)
endif()

target_link_libraries(LineVis PUBLIC sgl ${Boost_LIBRARIES} ${OPENGL_LIBRARIES} GLEW::GLEW ${NETCDF_LIBRARIES} ${JSONCPP_LIBRARIES})
include_directories(${sgl_INCLUDES} ${Boost_INCLUDE_DIR} ${OPENGL_INCLUDE_DIRS} ${GLEW_INCLUDES} ${NETCDF_INCLUDES} ${JSONCPP_INCLUDE_DIRS})

if(VCPKG_TOOLCHAIN)
    target_link_libraries(LineVis PRIVATE tinyxml2::tinyxml2)
else()
    target_link_libraries(LineVis PRIVATE ${TINYXML2_LIBRARIES})
endif()
target_include_directories(LineVis PRIVATE ${TINYXML2_INCLUDE_DIR})

find_package(cppzmq QUIET)
if (${cppzmq_FOUND})
    target_link_libraries(LineVis PUBLIC cppzmq)
    if (${CMAKE_VERSION} VERSION_LESS "3.12")
        add_definitions(-DUSE_ZEROMQ)
    else()
        add_compile_definitions(USE_ZEROMQ)
    endif()
else()
    # https://stackoverflow.com/questions/41251474/how-to-import-zeromq-libraries-in-cmake/41252437
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(PC_ZeroMQ QUIET zmq)
    #if (${PC_ZeroMQ_FOUND})
        find_path(ZeroMQ_INCLUDE_DIRS NAMES zmq.hpp PATHS ${PC_ZeroMQ_INCLUDE_DIRS})
        find_library(ZeroMQ_LIBRARIES NAMES zmq PATHS ${PC_ZeroMQ_LIBRARY_DIRS})
        target_include_directories(LineVis PUBLIC ${ZeroMQ_INCLUDE_DIRS})
        target_link_libraries(LineVis PUBLIC ${ZeroMQ_LIBRARIES})
        if (${CMAKE_VERSION} VERSION_LESS "3.12")
            add_definitions(-DUSE_ZEROMQ)
        else()
            add_compile_definitions(USE_ZEROMQ)
        endif()
    #endif()
endif()

# Eigen is an optional dependency for eigenvalue solving.
find_package(Eigen3 QUIET)
if (Eigen3_FOUND)
    if(NOT (EIGEN3_VERSION_STRING LESS 3.3))
        target_link_libraries(LineVis PUBLIC Eigen3::Eigen)
    else()
        include_directories(${EIGEN3_INCLUDE_DIR})
    endif()
    add_definitions(-DUSE_EIGEN)
endif()

if (TARGET jsoncpp_lib)
    get_target_property(jsoncpp_INCLUDES jsoncpp_lib INTERFACE_INCLUDE_DIRECTORIES)
    target_link_libraries(LineVis PUBLIC jsoncpp_lib)
else()
    get_target_property(jsoncpp_INCLUDES jsoncpp_static INTERFACE_INCLUDE_DIRECTORIES)
    if(VCPKG_TOOLCHAIN)
        target_link_libraries(LineVis PUBLIC jsoncpp)
    else()
        target_link_libraries(LineVis PUBLIC jsoncpp_static)
    endif()
endif()
include_directories(${jsoncpp_INCLUDES})

if (Python3_FOUND AND USE_PYTHON)
    add_definitions(-DUSE_PYTHON)
    if (${CMAKE_VERSION} VERSION_GREATER "3.11")
        target_link_libraries(LineVis PUBLIC Python3::Python)
    else()
        target_link_libraries(LineVis PUBLIC ${Python3_LIBRARIES})
    endif()
    target_include_directories(LineVis PUBLIC ${Python3_INCLUDE_DIRS})

    # Add default PYTHONHOME path for vcpkg if no environment variable is set.
    if(VCPKG_TOOLCHAIN)
        if(DEFINED ENV{PYTHONHOME})
            set(PYTHONHOME "$ENV{PYTHONHOME}")
        else()
            find_path(PYTHONHOME_PATH tools/python3 HINTS ${PYTHONHOME_PATH})
            if (MSVC)
                set(PYTHONHOME "${PYTHONHOME_PATH}/tools/python3")
            else()
                set(PYTHONHOME "${PYTHONHOME_PATH}")
            endif()
        endif()
        if (PYTHONHOME)
            set(PYTHONHOME "${PYTHONHOME}" CACHE STRING "PYTHONHOME path.")
            add_definitions(-DPYTHONHOME_PATH=L\"${PYTHONHOME}\")
        endif()
    endif()
endif()

if (SUPPORT_VULKAN AND USE_VULKAN_INTEROP)
    add_definitions(-DUSE_VULKAN_INTEROP)
    add_definitions(-DENABLE_AMBIENT_OCCLUSION)
endif()

if(embree_FOUND)
    if(VCPKG_TOOLCHAIN)
        target_link_libraries(LineVis PUBLIC embree)
    else()
        target_link_libraries(LineVis PUBLIC ${EMBREE_LIBRARIES})
    endif()
    target_include_directories(LineVis PRIVATE ${EMBREE_INCLUDE_DIRS})
    add_definitions(-DUSE_EMBREE)
endif()

if(ospray_FOUND)
    target_link_libraries(LineVis PRIVATE ospray::ospray)
    target_include_directories(LineVis PRIVATE ${OSPRAY_INCLUDE_DIRS})
    add_definitions(-DUSE_OSPRAY)
endif()

find_package(OpenMP REQUIRED)
if(OPENMP_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()


if (USE_GTEST)
    include(GoogleTest)
    enable_testing()
    add_executable(LineVis_test test/TestKdTreeNearestNeighbor.cpp
            src/LineData/SearchStructures/NearestNeighborNaive.cpp
            src/LineData/SearchStructures/SearchStructure.cpp
            src/LineData/SearchStructures/KdTree.cpp)
    target_link_libraries(LineVis_test gtest gtest_main)
    gtest_add_tests(TARGET LineVis_test)
endif()
